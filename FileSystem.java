import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;

public class FileSystem {
    public static void listDirectory(String path) {
        File file = new File(path);
        File[] files = file.listFiles();
        if (files == null) {
            System.err.println("No such file or directory: " + path);
            return;
        }
        StringBuilder result = new StringBuilder();
        for (File value : files) {
            result.append(value.getName()).append(" ");
        }
        System.out.println(result.toString().trim());
    }


    public static void listPythonFiles(String path) {
        File file = new File(path);
        File[] files = file.listFiles();
        if (files == null) {
            System.err.println("No such file or directory: " + path);
            return;
        }
        StringBuilder result = new StringBuilder();
        for (File value : files) {
            if (value.isFile() && value.getName().endsWith(".py")) {
                result.append(value.getName()).append(" ");
            }
        }
        System.out.println(result.toString().trim());
    }

    public static void isDirectory(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("Directory does not exist: " + path);
            return;
        }
        System.out.println(file.isDirectory());
    }

    public static void define(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File or directory does not exist: " + path);
            return;
        }
        if (file.isDirectory()) {
            System.out.println("Директория");
        } else {
            System.out.println("Файл");
        }
    }

    public static void printPermissions(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File or directory does not exist: " + path);
            return;
        }
        String permissions =
                (file.canRead() ? "r" : "-") +
                (file.canWrite() ? "w" : "-") +
                (file.canExecute() ? "x" : "-");
        System.out.println(permissions);
    }

    public static void setPermissions(String path, String permissions) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File or directory does not exist: " + path);
            return;
        }
        file.setReadable(false);
        file.setWritable(false);
        file.setExecutable(false);
        for (char c : permissions.toCharArray()) {
            switch (c) {
                case 'r':
                    System.out.print(file.setReadable(true) ? "+r " : "Can't set readable ");
                    break;
                case 'w':
                    System.out.print(file.setWritable(true) ? "+w " : "Can't set writable ");
                    break;
                case 'x':
                    System.out.print(file.setExecutable(true) ? "+x " : "Can't set executable ");
                    break;
            }
        }
        System.out.println();
    }

    public static void printContent(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File does not exist");
            return;
        }
        if (file.isDirectory()) {
            System.err.println("This is a directory");
            return;
        }
        if (file.canRead()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                reader.lines().forEach(System.out::println);
            } catch (IOException e) {
                System.err.println("File does not exist");
            }
        }else {
            System.err.println("No permissions for read");
        }
    }
    public static void appendFooter(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File does not exist");
            return;
        }
        if (file.isDirectory()) {
            System.err.println("This is a directory");
            return;
        }
        if (!file.canWrite()) {
            System.err.println("Can't write to file: No permissions");
            return;
        }
        try (PrintWriter writer = new PrintWriter(new FileWriter(file, true))) {
            writer.println("# Autogenerated line");
        } catch (IOException e) {
            System.out.println("Can't write to file: " + e.getMessage());
        }
    }
    public static void createBackup(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File does not exist: " + path);
            return;
        }
        if (!file.canRead()) {
            System.err.println("Can't read file: No permissions: " + path);
            return;
        }

        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String backupPathString = "/tmp/" + formatter.format(currentDate) + ".backup";
        Path backupPath = Paths.get(backupPathString);

        Path sourcePath = Paths.get(path);
        try {
            if (!Files.exists(backupPath)) {
                Files.createDirectories(backupPath);
            }
            if (file.isDirectory()) {
                Files.walkFileTree(sourcePath, new SimpleFileVisitor<>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                        Files.copy(file, backupPath.resolve(sourcePath.relativize(file)), StandardCopyOption.REPLACE_EXISTING);
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                        Path targetPath = backupPath.resolve(sourcePath.relativize(dir));
                        if (Files.notExists(targetPath)) {
                            Files.createDirectory(targetPath);
                        }
                        return FileVisitResult.CONTINUE;
                    }
                });
            } else {
                Path backupFilePath = backupPath.resolve(file.getName());
                Files.copy(sourcePath, backupFilePath, StandardCopyOption.REPLACE_EXISTING);
            }
        } catch (IOException e) {
            System.err.println("Can't backup file: " + e.getMessage());
        }
    }
    public static void grepLong(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println("File does not exist: " + path);
            return;
        }
        if (file.isDirectory()) {
            System.err.println("This is a directory: " + path);
            return;
        }
        if (!file.canRead()) {
            System.err.println("Can't read file: No permissions: " + path);
            return;
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            var ref = new Object() {
                String longestWord = "";
            };
            reader.lines().forEach(
                    line -> Arrays.stream(line.split(" ")).forEach(
                            word -> {
                                if (word.length() > ref.longestWord.length())
                                    ref.longestWord = word;
                            }
                    )
            );
            System.out.println(ref.longestWord);
        } catch (IOException e) {
            System.err.println("Can't process operation: " + e.getMessage());
        }
    }

}
